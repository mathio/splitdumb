generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Group {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  title     String
  expenses  Expense[]
  payments  Payment[]
  user      User      @relation(fields: [userId], references: [id])
  userId    Int
  members   User[]    @relation("Member")
}

model Expense {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  title     String
  payments  Balance[] @relation("Pays")
  debts     Balance[] @relation("Owes")
  group     Group     @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId   Int
  user      User      @relation(fields: [userId], references: [id])
  userId    Int
}

model Balance {
  id        Int     @id @default(autoincrement())
  pays      Expense @relation("Pays", fields: [expenseId], references: [id], map: "expenses1", onDelete: Cascade)
  owes      Expense @relation("Owes", fields: [expenseId], references: [id], map: "expenses2", onDelete: Cascade)
  expenseId Int
  user      User    @relation(fields: [userId], references: [id])
  userId    Int
  sum       Decimal
}

model Payment {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation("User", fields: [userId], references: [id])
  userId     Int
  sender     User     @relation("Sender", fields: [senderId], references: [id])
  senderId   Int
  receiver   User     @relation("Receiver", fields: [receiverId], references: [id])
  receiverId Int
  group      Group?   @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId    Int?
  sum        Decimal
}

model User {
  id               Int       @id @default(autoincrement())
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  name             String
  email            String    @unique
  emailVerified    DateTime?
  image            String?
  accounts         Account[]
  sessions         Session[]
  receivedPayments Payment[] @relation("Receiver")
  sentPayments     Payment[] @relation("Sender")
  payment          Payment[] @relation("User")
  balances         Balance[]
  expenses         Expense[]
  groups           Group[]
  memberGroups     Group[]   @relation("Member")
}

model Account {
  id                 Int     @id @default(autoincrement())
  userId             Int     @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique @map("session_token")
  userId       Int      @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
